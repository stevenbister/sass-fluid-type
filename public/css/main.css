/*
  Josh's Custom CSS Reset
  https://www.joshwcomeau.com/css/custom-css-reset/
*/
*, *::before, *::after {
  box-sizing: border-box;
}

* {
  margin: 0;
}

html, body {
  height: 100%;
}

body {
  line-height: 1.5;
  -webkit-font-smoothing: antialiased;
}

img, picture, video, canvas, svg {
  display: block;
  max-width: 100%;
}

input, button, textarea, select {
  font: inherit;
}

p, h1, h2, h3, h4, h5, h6 {
  overflow-wrap: break-word;
}

#root, #__next {
  isolation: isolate;
}

/* ============================
// $FONT STYLES
// Define our Font Elements/Classes.
// We are able to utilise semantic H1-H6 but also override the presentation using the class convention
*/
/* ============================
//  Usage:
//
// @param {*} elements - expects an element tag. recommended h1 - h6
// @param {*} classes - expects desired class name, value matches values from the steps in our tokens file
// @param {*} line-height - expects a line-height value
// @param {*} vertial-spacing - expects desired vertical spacing, value matches values from the steps in our tokens file

// Usage:
// <h1 class="t-font-beta"></h1>
*/
:root {
  --scale-micro: clamp(0.52rem, -0.06vw + 0.53rem, 0.48rem);
  --scale-milli: clamp(0.64rem, -0.01vw + 0.64rem, 0.64rem);
  --scale-centi: clamp(0.8rem, 0.08vw + 0.78rem, 0.85rem);
  --scale-zeta: clamp(1rem, 0.23vw + 0.94rem, 1.13rem);
  --scale-epsilon: clamp(1.25rem, 0.45vw + 1.14rem, 1.5rem);
  --scale-delta: clamp(1.57rem, 0.78vw + 1.37rem, 2rem);
  --scale-gamma: clamp(1.96rem, 1.26vw + 1.64rem, 2.65rem);
  --scale-beta: clamp(2.45rem, 1.96vw + 1.95rem, 3.53rem);
  --scale-alpha: clamp(3.06rem, 2.96vw + 2.31rem, 4.69rem);
  --scale-omega: clamp(3.82rem, 4.39vw + 2.72rem, 6.23rem);
  --scale-kilo: clamp(4.77rem, 6.39vw + 3.17rem, 8.29rem);
  --scale-mega: clamp(5.97rem, 9.19vw + 3.66rem, 11.02rem);
}

h1,
h2,
h3,
h4,
h5,
h6,
[class*=t-font] {
  margin: 0 0 var(--scale-zeta);
  font-style: normal;
  text-transform: none;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-weight: 600;
}

.t-font-primary {
  font-family: Inter, helvetica, arial, sans-serif;
}

.t-font-mega {
  font-size: var(--scale-mega);
  line-height: 1;
  margin-bottom: var(--scale-beta);
}

.t-font-kilo {
  font-size: var(--scale-kilo);
  line-height: 1.1;
}

.t-font-omega {
  font-size: var(--scale-omega);
  line-height: 1.1;
}

h1 {
  font-size: var(--scale-alpha);
  line-height: 1.2;
}

.t-font-alpha {
  font-size: var(--scale-alpha);
  line-height: 1.2;
}

h2 {
  font-size: var(--scale-beta);
  line-height: 1.2;
}

.t-font-beta {
  font-size: var(--scale-beta);
  line-height: 1.2;
}

h3 {
  font-size: var(--scale-gamma);
  line-height: 1.2;
}

.t-font-gamma {
  font-size: var(--scale-gamma);
  line-height: 1.2;
}

h4 {
  font-size: var(--scale-delta);
  line-height: 1.2;
}

.t-font-delta {
  font-size: var(--scale-delta);
  line-height: 1.2;
}

h5 {
  font-size: var(--scale-epsilon);
  line-height: 1.2;
}

.t-font-epsilon {
  font-size: var(--scale-epsilon);
  line-height: 1.2;
}

body {
  font-size: var(--scale-zeta);
  line-height: 1.2;
}

h6 {
  font-size: var(--scale-zeta);
  line-height: 1.2;
}

.t-font-zeta {
  font-size: var(--scale-zeta);
  line-height: 1.2;
}

.t-font-centi {
  font-size: var(--scale-centi);
  line-height: 1.2;
}

.t-font-milli {
  font-size: var(--scale-milli);
  line-height: 1.2;
}

.t-font-micro {
  font-size: var(--scale-micro);
  line-height: 1.2;
}

/* =============================================================================
   Primary styles
   ========================================================================== */
/*
  Contents
  --------
	0 	$ELEMENTS
	2 	$OBJECTS
	3 	$COMPONENTS
	4	$LAYOUT
	5 	$UTILITIES
	6 	$STYLEGUIDE
*/
/* ============================
// $ELEMENTS
// Single HTML element selectors without classes
*/
/* ============================
// $OBJECTS
// Classes for page structure typically following the OOCSS methodology
// The first layer in which we find class-level specificity
*/
/* ============================
// $TYPOGRAPHY
// Classes for the display and control of your typography.
// These elements sit loosely between objects and components and in turn can be overridden on a piece of UI
*/
/* ============================
//	$COMPONENTS
//  Classes for styling any & all UI elements (often combined with the structure of object classes)
//  Keep to DRY principles  ( [D]ont [R]epeat [Y]ourself )
*/
/* ============================
// $UTILITIES
// utilities classes in accordance with DRY mentality.
// Eliminates the need to create specific classes to perform simple tasks
// NOTE: Use sparingly
*/

/*# sourceMappingURL=main.css.map */
